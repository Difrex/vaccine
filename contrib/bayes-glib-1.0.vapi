/* bayes-glib-1.0.vapi generated by vapigen-0.30, do not modify. */

[CCode (cprefix = "Bayes", gir_namespace = "Bayes", gir_version = "1.0", lower_case_cprefix = "bayes_")]
namespace Bayes {
	[CCode (cheader_filename = "bayes-glib.h", type_id = "bayes_classifier_get_type ()")]
	public class Classifier : GLib.Object {
		[CCode (has_construct_function = false)]
		public Classifier ();
		public unowned Bayes.Storage get_storage ();
		public GLib.List<Bayes.Guess> guess (string text);
		public void set_storage (Bayes.Storage? storage);
		public void set_tokenizer (owned Bayes.Tokenizer tokenizer);
		public void train (string name, string text);
		public Bayes.Storage storage { get; set; }
	}
	[CCode (cheader_filename = "bayes-glib.h", ref_function = "bayes_guess_ref", type_id = "bayes_guess_get_type ()", unref_function = "bayes_guess_unref")]
	[Compact]
	public class Guess {
		[CCode (has_construct_function = false)]
		public Guess (string name, double probability);
		public unowned string get_name ();
		public double get_probability ();
		public Bayes.Guess @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "bayes-glib.h", type_id = "bayes_storage_memory_get_type ()")]
	public class StorageMemory : GLib.Object, Bayes.Storage, Json.Serializable {
		[CCode (has_construct_function = false)]
		public StorageMemory ();
		[CCode (has_construct_function = false)]
		public StorageMemory.from_file (string filename) throws GLib.Error;
		[CCode (has_construct_function = false)]
		public StorageMemory.from_stream (GLib.InputStream stream, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool save_to_file (string filename) throws GLib.Error;
		[NoAccessorMethod]
		public Bayes.Tokens corpus { get; set; }
		[NoAccessorMethod]
		public GLib.HashTable<weak string,weak Bayes.Tokens> names { owned get; set; }
	}
	[CCode (cheader_filename = "bayes-glib.h", type_cname = "BayesStorageInterface", type_id = "bayes_storage_get_type ()")]
	public interface Storage : GLib.Object {
		public void add_token (string name, string token);
		public abstract void add_token_count (string name, string token, uint count);
		[CCode (array_length = false, array_null_terminated = true)]
		public abstract string[] get_names ();
		public abstract uint get_token_count (string? name, string? token);
		public abstract double get_token_probability (string name, string token);
	}
	[CCode (cheader_filename = "bayes-glib.h")]
	[SimpleType]
	public struct Classifier_autoptr {
	}
	[CCode (cheader_filename = "bayes-glib.h")]
	[SimpleType]
	public struct Guess_autoptr {
	}
	[CCode (cheader_filename = "bayes-glib.h")]
	[SimpleType]
	public struct StorageMemory_autoptr {
	}
	[CCode (cheader_filename = "bayes-glib.h")]
	[SimpleType]
	public struct Storage_autoptr {
	}
	[CCode (cheader_filename = "bayes-glib.h", has_type_id = false)]
	public struct Tokens {
	}
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "bayes-glib.h", instance_pos = 1.9)]
	public delegate string[] Tokenizer (string text);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "bayes-glib.h")]
	public static string[] tokenizer_code_tokens (string text, void* user_data);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "bayes-glib.h")]
	public static string[] tokenizer_word (string text, void* user_data);
}
