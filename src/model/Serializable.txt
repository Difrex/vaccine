public class ??? : Object, Json.Serializable {
    public bool deserialize_property (string prop_name, out Value val, ParamSpec pspec, Json.Node property_node) {
        if (property_name != "???") {
            val = Value (pspec.value_type);
            return default_deserialize_property (property_name, &val, pspec, property_node);
        }

        var list = new ArrayList<???> ();
        property_node.get_array().foreach_element ((arr, index, node) => {
            list.add (Json.gobject_deserialize (typeof (???), node) as ???);
        });
        val = Value (list.get_type ());
        val.set_object (list);
        return true;
    }

    public unowned ParamSpec find_property (string name) {
        return this.get_class ().find_property (name);
    }

    public Json.Node serialize_property (string prop_name, Value val, ParamSpec pspec) {
        error ("serialization not supported");
    }
}
